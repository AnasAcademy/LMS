private function storeExtraData($installment, $data)
    {
        InstallmentTranslation::updateOrCreate([
            'installment_id' => $installment->id,
            'locale' => mb_strtolower($data['locale']),
        ], [
            'title' => $data['title'],
            'main_title' => $data['main_title'],
            'description' => $data['description'],
            'banner' => $data['banner'] ?? null,
            'options' => !empty($data['installment_options']) ? implode(Installment::$optionsExplodeKey, array_filter($data['installment_options'])) : null,
            'verification_description' => $data['verification_description'] ?? null,
            'verification_banner' => $data['verification_banner'] ?? null,
            'verification_video' => $data['verification_video'] ?? null,
        ]);

        InstallmentSpecificationItem::query()->where('installment_id', $installment->id)->delete();

        $specificationItems = [
            'category_ids' => 'category_id',
            'instructor_ids' => 'instructor_id',
            'seller_ids' => 'seller_id',
            'webinar_ids' => 'webinar_id',
            'product_ids' => 'product_id',
            'bundle_ids' => 'bundle_id',
            'subscribe_ids' => 'subscribe_id',
            'registration_package_ids' => 'registration_package_id',
        ];

        foreach ($specificationItems as $key => $column) {
            if (!empty($data[$key]) and $this->checkStoreSpecificationItems($key, $installment->target, $installment->target_type)) {
                $insert = [];

                foreach ($data[$key] as $item) {
                    $insert[] = [
                        'installment_id' => $installment->id,
                        $column => $item,
                    ];
                }

                if (!empty($insert)) {
                    InstallmentSpecificationItem::query()->insert($insert);
                }
            }
        }

        /* Steps */
        $ignoreStepIds = [];
        if (!empty($data['steps'])) {

            $order = 0;

            foreach ($data['steps'] as $stepId => $stepData) {
                if (!empty($stepData) and $stepId != "record") {
                    $step = InstallmentStep::query()->where('id', $stepId)
                        ->where('installment_id', $installment->id)
                        ->first();

                    if (!empty($step)) {
                        $step->update([
                            'deadline' => $stepData['deadline'] ?? null,
                            'amount' => $stepData['amount'] ?? null,
                            'amount_type' => $stepData['amount_type'] ?? null,
                            'order' => $order,
                        ]);
                    } else {
                        $step = InstallmentStep::query()->create([
                            'installment_id' => $installment->id,
                            'deadline' => $stepData['deadline'] ?? null,
                            'amount' => $stepData['amount'] ?? null,
                            'amount_type' => $stepData['amount_type'] ?? null,
                            'order' => $order,
                        ]);
                    }

                    if (!empty($step)) {
                        $ignoreStepIds[] = $step->id;

                        InstallmentStepTranslation::query()->updateOrCreate([
                            'installment_step_id' => $step->id,
                            'locale' => mb_strtolower($data['locale']),
                        ], [
                            'title' => $stepData['title'],
                        ]);

                        $order = $order + 1;
                    }
                }
            }
        }

        InstallmentStep::query()->whereNotIn('id', $ignoreStepIds)
            ->where('installment_id', $installment->id)
            ->delete();

        /* User Groups */
        InstallmentUserGroup::query()->where('installment_id', $installment->id)->delete();
        if (!empty($data['group_ids'])) {
            $insert = [];

            foreach ($data['group_ids'] as $groupId) {
                if (!empty($groupId)) {
                    $insert[] = [
                        'installment_id' => $installment->id,
                        'group_id' => $groupId,
                    ];
                }
            }

            if (!empty($insert)) {
                InstallmentUserGroup::query()->insert($insert);
            }
        }
    }